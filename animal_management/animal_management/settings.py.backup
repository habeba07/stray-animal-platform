"""
Django settings for animal_management project.
"""

from pathlib import Path
import pymongo
from pymongo import MongoClient
import os
import sys
import glob

# Function to find the GDAL library
def find_gdal_library():
    """Find the GDAL library on the system and return its path"""
    # Check environment variable first
    if 'GDAL_LIBRARY_PATH' in os.environ and os.path.exists(os.environ['GDAL_LIBRARY_PATH']):
        return os.environ['GDAL_LIBRARY_PATH']
    
    # Common paths where GDAL might be found in Docker
    gdal_paths = [
        '/usr/lib/libgdal.so',
        '/usr/lib/x86_64-linux-gnu/libgdal.so',
        '/usr/lib/x86_64-linux-gnu/libgdal.so.28',
        '/usr/lib/x86_64-linux-gnu/libgdal.so.27',
        '/usr/lib/x86_64-linux-gnu/libgdal.so.26'
    ]
    
    # Check each specific path
    for path in gdal_paths:
        if os.path.exists(path):
            return path
    
    # Broader search if specific paths not found
    paths = glob.glob('/usr/lib/*/libgdal.so*')
    if paths:
        return paths[0]
    
    paths = glob.glob('/usr/lib/libgdal.so*')
    if paths:
        return paths[0]
    
    paths = glob.glob('/lib/*/libgdal.so*')
    if paths:
        return paths[0]
        
    # Fall back to Mac path if on macOS
    if sys.platform == 'darwin':
        return '/opt/homebrew/lib/libgdal.dylib'
        
    return None

# Set the GDAL path
GDAL_LIBRARY_PATH = find_gdal_library()
print(f"Using GDAL library path: {GDAL_LIBRARY_PATH}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', 'testserver']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',  # Make sure this is near the top
    
    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'health',
    
    # Project apps
    'users',
    'animals',
    'reports',
    'healthcare',
    'adoptions',
    'donations',
    'community',
    'dashboard',
    'volunteers',
    'resources',
    'virtual_adoptions',
    'notifications',
    'mental_health',
    'inventory',
    'analytics', 
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Add this at the top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'animal_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'animal_management.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'animal_management',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'db',
        'PORT': 5432,
        'OPTIONS': {
            'options': '-c search_path=public',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# MongoDB connection
MONGODB_URI = os.environ.get('MONGODB_URI', 'mongodb://localhost:27017/')
MONGODB_CLIENT = MongoClient(MONGODB_URI)
MONGODB_DB = MONGODB_CLIENT['stray_animal_management']

# Custom user model
AUTH_USER_MODEL = 'users.User'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only

# Media files settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Login redirection settings
LOGIN_REDIRECT_URL = '/api/'
LOGOUT_REDIRECT_URL = '/'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'animal_mgmt',
        'TIMEOUT': 300,  # 5 minutes default timeout
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'


# Import Docker settings override - keep this at the end
try:
    from .settings_override import *
except ImportError:
    pass
