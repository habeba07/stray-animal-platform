import React, { useState } from 'react';
import { Link as RouterLink, useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { logout } from '../redux/slices/authSlice';
import {
  AppBar,
  Box,
  Toolbar,
  IconButton,
  Typography,
  Menu,
  Container,
  Avatar,
  Button,
  Tooltip,
  MenuItem,
} from '@mui/material';
import MenuIcon from '@mui/icons-material/Menu';
import PetsIcon from '@mui/icons-material/Pets';
import PointsDisplay from './Community/PointsDisplay';
import NotificationBell from './Notifications/NotificationBell';

function NavBar() {
  const [anchorElNav, setAnchorElNav] = useState(null);
  const [anchorElUser, setAnchorElUser] = useState(null);

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { user } = useSelector((state) => state.auth);

  const handleOpenNavMenu = (event) => {
    setAnchorElNav(event.currentTarget);
  };
  
  const handleOpenUserMenu = (event) => {
    setAnchorElUser(event.currentTarget);
  };

  const handleCloseNavMenu = () => {
    setAnchorElNav(null);
  };

  const handleCloseUserMenu = () => {
    setAnchorElUser(null);
  };

  // Logout function using Redux
  const handleLogout = () => {
    console.log('Logging out...');
    dispatch(logout());
    handleCloseUserMenu();
    navigate('/login');
  };

  // Navigation items for users that are not logged in
  const publicPages = [
    { title: 'Home', path: '/' },
    { title: 'Adoptable Animals', path: '/animals' },
    { title: 'Report Animal', path: '/report-animal' },
    { title: 'Resources', path: '/resources' },
    { title: 'ðŸŽ“ Interactive Learning', path: '/interactive-learning' }, 

  ];

  // Navigation items for authenticated users
  const privatePages = [
    { title: 'Home', path: '/' },
    { title: 'Adoptable Animals', path: '/animals' },
    { title: 'Report Animal', path: '/report-animal' },
    { title: 'My Reports', path: '/reports' },
    { title: 'Forum', path: '/forum' },
    { title: 'ðŸŽ“ Interactive Learning', path: '/interactive-learning' },  
    { title: 'Adoption Matches', path: '/adoption/matches' },
    { title: 'Adopter Profile', path: '/adoption/profile' },
    { title: 'My Applications', path: '/adoption/applications' },
    { title: 'Donate', path: '/donations' },
    { title: 'My Activities', path: '/activities' },
    { title: 'Rewards', path: '/rewards' },
    { title: 'Achievements', path: '/achievements' },
    { title: 'Volunteer', path: '/volunteer/opportunities' },
    { title: 'Resources', path: '/resources' },
    { title: 'My Virtual Adoptions', path: '/virtual-adoptions/my' },
    { title: 'Impact Dashboard', path: '/impact-dashboard' },
    { title: 'Predictions', path: '/predictive-dashboard' }
  ];

  // Add dashboard for shelter staff and authorities
  if (user && (user.user_type === 'SHELTER' || user.user_type === 'AUTHORITY' || user.user_type === 'STAFF')) {
    privatePages.push({ title: 'Dashboard', path: '/dashboard' });
  }

  if (user && ['SHELTER', 'AUTHORITY', 'STAFF'].includes(user.user_type)) {
    privatePages.push(
      { title: 'Inventory', path: '/inventory/dashboard' }
    );
  }

  // Determine which navigation items to show based on authentication status
  const navItems = user ? privatePages : publicPages;

  console.log('NavBar render - user:', !!user, user?.username);

  return (
    <AppBar position="static">
      <Container maxWidth="xl">
        <Toolbar disableGutters>
          {/* Logo - visible on desktop */}
          <PetsIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} />
          <Typography
            variant="h6"
            noWrap
            component={RouterLink}
            to="/"
            sx={{
              mr: 2,
              display: { xs: 'none', md: 'flex' },
              fontFamily: 'monospace',
              fontWeight: 700,
              letterSpacing: '.3rem',
              color: 'inherit',
              textDecoration: 'none',
            }}
          >
            PAWRESCUE
          </Typography>

          {/* Mobile menu */}
          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>
            <IconButton
              size="large"
              aria-label="account of current user"
              aria-controls="menu-appbar"
              aria-haspopup="true"
              onClick={handleOpenNavMenu}
              color="inherit"
            >
              <MenuIcon />
            </IconButton>
            <Menu
              id="menu-appbar"
              anchorEl={anchorElNav}
              anchorOrigin={{
                vertical: 'bottom',
                horizontal: 'left',
              }}
              keepMounted
              transformOrigin={{
                vertical: 'top',
                horizontal: 'left',
              }}
              open={Boolean(anchorElNav)}
              onClose={handleCloseNavMenu}
              sx={{
                display: { xs: 'block', md: 'none' },
              }}
            >
              {navItems.map((page) => (
                <MenuItem 
                  key={page.title} 
                  onClick={handleCloseNavMenu}
                  component={RouterLink}
                  to={page.path}
                >
                  <Typography textAlign="center">{page.title}</Typography>
                </MenuItem>
              ))}
            </Menu>
          </Box>

          {/* Logo - visible on mobile */}
          <PetsIcon sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }} />
          <Typography
            variant="h5"
            noWrap
            component={RouterLink}
            to="/"
            sx={{
              mr: 2,
              display: { xs: 'flex', md: 'none' },
              flexGrow: 1,
              fontFamily: 'monospace',
              fontWeight: 700,
              letterSpacing: '.3rem',
              color: 'inherit',
              textDecoration: 'none',
            }}
          >
            PAWRESCUE
          </Typography>

          {/* Desktop menu */}
          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>
            {navItems.map((page) => (
              <Button
                key={page.title}
                component={RouterLink}
                to={page.path}
                sx={{ my: 2, color: 'white', display: 'block' }}
              >
                {page.title}
              </Button>
            ))}
          </Box>

          {/* User menu or login/register buttons */}
          <Box sx={{ flexGrow: 0, display: 'flex', alignItems: 'center' }}>
            {user && <NotificationBell />}
            {user ? (
              <>
                <PointsDisplay />
                <Tooltip title="Open settings">
                  <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>
                    <Avatar alt={user.username} src="/static/images/avatar/2.jpg" />
                  </IconButton>
                </Tooltip>
                <Menu
                  sx={{ mt: '45px' }}
                  id="menu-appbar"
                  anchorEl={anchorElUser}
                  anchorOrigin={{
                    vertical: 'top',
                    horizontal: 'right',
                  }}
                  keepMounted
                  transformOrigin={{
                    vertical: 'top',
                    horizontal: 'right',
                  }}
                  open={Boolean(anchorElUser)}
                  onClose={handleCloseUserMenu}
                >
                  <MenuItem component={RouterLink} to="/profile" onClick={handleCloseUserMenu}>
                    <Typography textAlign="center">Profile</Typography>
                  </MenuItem>
                  <MenuItem onClick={handleLogout}>
                    <Typography textAlign="center">Logout</Typography>
                  </MenuItem>
                </Menu>
              </>
            ) : (
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Button 
                  color="inherit" 
                  component={RouterLink} 
                  to="/login"
                >
                  Login
                </Button>
                <Button 
                  color="inherit" 
                  variant="outlined" 
                  component={RouterLink} 
                  to="/register"
                  sx={{ 
                    borderColor: 'white',
                    '&:hover': { borderColor: 'white', backgroundColor: 'rgba(255, 255, 255, 0.1)' }
                  }}
                >
                  Register
                </Button>
              </Box>
            )}
          </Box>
        </Toolbar>
      </Container>
    </AppBar>
  );
}

export default NavBar;